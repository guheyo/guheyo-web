fragment socialAccountWithoutAuth on SocialAccountWithoutAuthResponse {
  id
  createdAt
  provider
  socialId
  userId
}

fragment socialAccount on SocialAccountResponse {
  id
  createdAt
  provider
  socialId
  userId
  refreshToken
  accessToken
  expiresAt
  tokenType
  scope
  idToken
  sessionState
}

fragment socialAccountConflict on SocialAccountConflictResponse {
  id
  createdAt
  conflictReason
  provider
  socialId
  newUser {
    ...author
  }
  existingUser {
    ...author
  }
  status
  userAgent
  ipAddress
}

query FindSocialAccountConflicts(
  $where: FindSocialAccountConflictsWhereInput
  $orderBy: FindSocialAccountConflictsOrderByInput
  $keyword: String
  $target: String
  $cursor: ID
  $skip: Int!
  $take: Int!
) {
  findSocialAccountConflicts(
    where: $where
    orderBy: $orderBy
    keyword: $keyword
    target: $target
    cursor: $cursor
    skip: $skip
    take: $take
  ) {
    edges {
      node {
        ...socialAccountConflict
      }
      cursor
    }
    pageInfo {
      endCursor
      hasNextPage
    }
  }
}
